//Jiwhan Son, Karime Saad
//js78978, ks38728
//EE422C - Assignment 3

/*
 * Main driver for Item class. Will carry out shopping cart actions
 * 
 * @author	Jiwhan Son, Karime Saad
 */

package Assignment3;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

public class ShoppingCartDriver {
	
	static ArrayList<Item> shoppingCart = new ArrayList<Item>();

	public static void main(String[] args)
	{
	if (args.length != 1) {
		System.err.println("Error: Incorrect number of command line arguments");
		System.exit(-1);
	}
	processLinesInFile(args[0]);

	}
	public static void processLinesInFile(String filename) {
		ShoppingCartDriver shoppingCart = new ShoppingCartDriver();
		try {
			FileReader freader = new FileReader(filename);
			BufferedReader reader = new BufferedReader(freader);
			for (String s = reader.readLine(); s != null; s = reader.readLine()) {
				shoppingCart.transaction(s);	//transaction is the name of the method
				//System.out.println(output);
			}
		} catch (FileNotFoundException e) {
			System.err.println("Error: File not found. Exiting...");
			e.printStackTrace();
			System.exit(-1);
		} catch (IOException e) {
			System.err.println("Error: IO exception. Exiting...");
			e.printStackTrace();
			System.exit(-1);
		}
	}

	/*
	 * Determines which shopping cart command to take. 
	 * 
	 * @param	s	input from text file
	 */
	private void transaction(String s) {
		String[] input = s.split("\\s+");
		if(input[0].toLowerCase().equals("insert"))
			insert(input);
		else if (input[0].toLowerCase().equals("search")) {
			search(input);
		}
		else if (input[0].toLowerCase().equals("delete")) {
			delete(input);
		}
		else if (input[0].toLowerCase().equals("update")) {
			update(input);
		}
		else if (input[0].toLowerCase().equals("print")) {
			print();
		}
		else {
			System.out.println("Invalid Command");
		}
		
		Collections.sort(shoppingCart, new ShoppingCompare());
	}
	
	/*
	 * Inserts an item into the shopping cart
	 * 
	 * @param	input	input from text file
	 */
	public void insert(String[] input) {
		try {
			if(input[1].equals("clothing")) {
				if(input.length != 6) {
					throw new IllegalArgumentException();
				}
				String name = input[2];
				float price = Float.parseFloat(input[3]);
				int quantity = Integer.parseInt(input[4]);
				int weight = Integer.parseInt(input[5]);
				Clothing insertClothing = new Clothing(name, price, quantity, weight);
				shoppingCart.add(insertClothing);
			}
			else if (input[1].equals("electronics")) {
				if(input.length != 8) {
					throw new IllegalArgumentException();
				}
				String name = input[2];
				float price = Float.parseFloat(input[3]);
				int quantity = Integer.parseInt(input[4]);
				int weight = Integer.parseInt(input[5]);
				String fragility = input[6];
				String state = input[7];
				Electronics insertElec = new Electronics(name, price, quantity, weight, fragility, state);
				shoppingCart.add(insertElec);
			}
			else if(input[1].equals("groceries")) {
				if(input.length != 7) {
					throw new IllegalArgumentException();
				}
				String name = input[2];
				float price = Float.parseFloat(input[3]);
				int quantity = Integer.parseInt(input[4]);
				int weight = Integer.parseInt(input[5]);
				String perishability = input[6];
				Grocery insertGroc = new Grocery(name, price, quantity, weight, perishability);
				shoppingCart.add(insertGroc);
			}
		}
		catch (NumberFormatException e) {
			System.out.println("Number Format Exception");
		}
		catch (IllegalArgumentException ee) {
			System.out.println("Illegal Argument Exception");
		}
	}
	
	/*
	 * Searches for an item in the shopping cart
	 * 
	 * @param	intput	input from text file
	 */
	public void search(String[] input) {
		if(input.length != 2 || !(input[1] instanceof String)) {
			throw new IllegalArgumentException("Invalid search command");
		}
		Iterator<Item> i = shoppingCart.iterator();
		int totalNumber = 0;
		while (i.hasNext()) {
			Item temp = i.next();
			if(temp.getName().equals(input[1])) {
				totalNumber += temp.getQuantity();
			}
		}
		System.out.println("Found " + totalNumber + " object(s) with name: " + input[1]);
	}
	
	/*
	 * Deletes an item from the shopping cart
	 * 
	 * @param	input	input from text file
	 */
	public void delete(String[] input) {
		if(input.length != 2 || !(input[1] instanceof String)) {
			throw new IllegalArgumentException("Invalid delete command");
		}
		Iterator<Item> i = shoppingCart.iterator();
		int totalNumber = 0;
		while (i.hasNext()) {
			Item temp = i.next();
			if(temp.getName().equals(input[1])) {
				totalNumber += temp.getQuantity();
				i.remove();
			}
		}
		System.out.println("Deleted " + totalNumber + " object(s) with name: " + input[1]);
	}
	
	/*
	 * Updates a quantity of an item in the shopping cart
	 * 
	 * @param	input	input from text file
	 */
	public void update(String[] input) {
		if(input.length != 3 || !(input[1] instanceof String)) {	//Check command length and format
			System.out.println("Invalid update command");
		}
		int newQuantity = 0;
		try {
			newQuantity = Integer.parseInt(input[2]);
			
		}
		catch (NumberFormatException e) {
			System.out.println("Invalid update command");
		}
		Iterator<Item> i = shoppingCart.iterator();
		while(i.hasNext()) {
			Item temp = i.next();
			if(temp.getName().equals(input[1])) {
				temp.setQuantity(newQuantity);
				System.out.println("Updated " + input[1] + " with new quantity " + newQuantity);
				return;
			}
		}
		System.out.println("Did not find object with name " + input[1]);		
	}
	
	/*
	 * Prints the attributes of all items in the shopping cart
	 */
	public void print() {		
		Iterator<Item> i = shoppingCart.iterator();
		float totalCharge = 0;
		while (i.hasNext())	//Print attributes for each item in shopping cart
		{
			Item temp = i.next();
			totalCharge += temp.calculatePrice(); 	//Add to total cost of everything in shopping cart
			temp.printItemAttributes();
			System.out.println();
		}
		System.out.println("Total Cart Charge: " + totalCharge);
	}		
}

/*
 * Used to sort the shopping cart by item name
 * 
 * @param	item1	an item in the cart
 * @param	item2	a different item in the cart
 * @return			integer value used to determine order
 */
class ShoppingCompare implements Comparator<Item> {
	public int compare(Item item1, Item item2) {
		return item1.getName().compareTo(item2.getName());
	}
}
